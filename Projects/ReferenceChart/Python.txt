<span class="token comment">### This python script will show the basics of python!</span>

<span class="token comment">## importing modules</span>
<span class="token keyword">import</span> os              <span class="token comment"># import an entire module</span>
<span class="token keyword">import</span> turtle <span class="token keyword">as</span> tl    <span class="token comment"># import a module with a nickname</span>
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep <span class="token comment"># import a function from a module</span>


<span class="token comment">## writing Hello World!</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span> <span class="token comment"># python automatically adds a newline at the end of a print statment</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># we can do this to create a blank line</span>


<span class="token comment">## using variables</span>

<span class="token comment"># variable_name = value</span>
age <span class="token operator">=</span> <span class="token number">17</span> <span class="token comment"># this is an int, python doesn't need you to specify types. It figures it out on it's own</span>
name <span class="token operator">=</span> <span class="token string">"Oskar"</span> <span class="token comment"># this is a string</span>
lastName <span class="token operator">=</span> <span class="token string">'Lindgren'</span> <span class="token comment"># we can also use single quotes!</span>
favoriteActivities <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Coding"</span><span class="token punctuation">,</span> <span class="token string">"Sleeping"</span><span class="token punctuation">,</span> <span class="token string">"Drinking coffe"</span><span class="token punctuation">]</span> <span class="token comment"># we can make a list of strings like this</span>
favoriteNumbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">]</span> <span class="token comment"># or a list of numbers like this!</span>
favoriteThings <span class="token operator">=</span> <span class="token punctuation">[</span>favoriteActivities<span class="token punctuation">,</span> favoriteNumbers<span class="token punctuation">]</span> <span class="token comment"># we can even make a list of lists! </span>
myTuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token comment"># this is a tuple, it's often used for coordinates on such</span>
myLongTuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># a touple doesn't have to ahve only 2 values, it can have as many as you want!</span>
myFloat <span class="token operator">=</span> <span class="token number">1.2</span> <span class="token comment"># this is a float, it's an integer with a little bit more!</span>


<span class="token comment">## concatinating variables</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"My name is "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> lastName<span class="token punctuation">)</span> <span class="token comment"># + means that we're adding or "concatenating" to the string</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"My name is"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> lastName<span class="token punctuation">)</span> <span class="token comment"># we can also use , This will add a space by itself</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"My name is"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> <span class="token string">"I am"</span><span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token string">"years old!"</span><span class="token punctuation">)</span> <span class="token comment"># we can even use multiple types of variables!</span>
<span class="token comment"># but then we can't use +. we have to use ,</span>
<span class="token comment"># so this wouldn't work:</span>
<span class="token comment"># print("My name is " + name + " " + lastName + " I am " + age + " years old!") </span>
<span class="token comment"># but we can use fstrings!</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"My name is </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span>lastName<span class="token punctuation">}</span></span><span class="token string"> I am </span><span class="token interpolation"><span class="token punctuation">{</span>age<span class="token punctuation">}</span></span><span class="token string"> years old!"</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">## user input</span>

userName <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"What's your name?\n"</span><span class="token punctuation">)</span> <span class="token comment"># unlike print(), input() will not add a new line, so we have to do it ourselves </span>
<span class="token comment"># we can also print out the question, then ask for input</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"How old are you?"</span><span class="token punctuation">)</span>
userAge <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># Now we don't have to write the newline</span>
userAge <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>userAge<span class="token punctuation">)</span> <span class="token comment"># we wanna make sure that userAge is a number, or an integer!</span>
<span class="token comment"># (if the user types something else than a number this will throw an error, but we'll look at that later!)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">## if statments</span>

<span class="token keyword">if</span> userAge <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token comment"># if userAge is less than 5</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You're younger than 5!"</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> userAge <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">:</span> <span class="token comment"># if userAge is less than OR equal to 10</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You're still pretty young!"</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> <span class="token number">11</span> <span class="token operator">&lt;</span> userAge <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">:</span> <span class="token comment"># if userAge is between 11 and 20 (12,13,14,15,16,17,18,19 - NOT 11 or 20)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You're between the age of 11 and 20"</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> <span class="token number">20</span> <span class="token operator">&lt;=</span> userAge <span class="token operator">&lt;=</span> <span class="token number">25</span><span class="token punctuation">:</span> <span class="token comment"># this will take 20, 21, 22, 23, 24 and 25</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You're an grown up!"</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> userAge <span class="token operator">!=</span> <span class="token number">69</span><span class="token punctuation">:</span> <span class="token comment"># this is how we check if something ISN'T true</span>
    <span class="token keyword">pass</span> <span class="token comment"># and this is how we do nothing!</span>
<span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment"># if none of the above apply</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You're pretty old!"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">## loops!</span>

<span class="token comment"># for loop</span>
<span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># counting from 1 to 10 (stops when it reaches ten, meaning it won't do anything when it reaches 10)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Loop iteration:"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># while loop</span>
timesRan <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment"># will continue forever</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I'm in a loop"</span><span class="token punctuation">)</span>
    timesRan <span class="token operator">+=</span> <span class="token number">1</span> <span class="token comment"># increase timesRan by one</span>

    <span class="token keyword">if</span> timesRan <span class="token operator">&gt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span> <span class="token comment"># breaks out fo the loop</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Phew, I broke out of the loop!"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">## functions</span>
<span class="token keyword">def</span> <span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># we make the function like this</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This is a function!"</span><span class="token punctuation">)</span> <span class="token comment"># then we tell it what to do</span>

myFunc<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># then we can call it</span>

<span class="token comment"># we can pass an argument like this</span>
<span class="token comment"># we will use the variable "thing_to_say" inside the function, then python will forget it. We're also saying that the variable should only accept inputs of the type string</span>
<span class="token keyword">def</span> <span class="token function">saySomething</span><span class="token punctuation">(</span>thing_to_say<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>thing_to_say<span class="token punctuation">)</span>

saySomething<span class="token punctuation">(</span><span class="token string">"I like python!"</span><span class="token punctuation">)</span> <span class="token comment"># then we can call it like this</span>
saySomething<span class="token punctuation">(</span>thing_to_say<span class="token operator">=</span><span class="token string">"I LOVE python!"</span><span class="token punctuation">)</span> <span class="token comment"># we can also call it like this, this is usefull when a function has multiple arguments</span>

<span class="token comment"># we can also define a "default state" like this</span>

<span class="token keyword">def</span> <span class="token function">anotherFunction</span><span class="token punctuation">(</span>argument<span class="token operator">=</span><span class="token string">"Nothing was passed"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>argument<span class="token punctuation">)</span>

anotherFunction<span class="token punctuation">(</span><span class="token punctuation">)</span>
anotherFunction<span class="token punctuation">(</span><span class="token string">"Something was passed!"</span><span class="token punctuation">)</span>

<span class="token comment"># a function can also "return" a value</span>

<span class="token keyword">def</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>num1<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">,</span> num2<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2

<span class="token keyword">print</span><span class="token punctuation">(</span>addTwoNumbers<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># let's print out the thing it returns!</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment">## try statment</span>
<span class="token comment"># if something might not always work, we can use a try statment</span>
<span class="token keyword">try</span><span class="token punctuation">:</span> <span class="token comment"># try to do this</span>
    temp <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I could add 1+1"</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> Exception<span class="token punctuation">:</span> <span class="token comment"># if it fails, do this instead</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I failed to add 1+1 :("</span><span class="token punctuation">)</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span> <span class="token comment"># regardless of result, do this</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Well that's over!"</span><span class="token punctuation">)</span>
<span class="token comment"># this will never fail, because computers are excelent at math, we'll see later how useful it can be!</span>


<span class="token comment">## let's jump back to the userAge problem!</span>
<span class="token comment"># we can force the user to only enter a number like this:</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        userAge <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"How old are you?\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># it will first try this</span>
        <span class="token keyword">break</span> <span class="token comment"># then this</span>

    <span class="token comment"># if at any point it fails, it will stop trying and to this instead</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"That's not a number!"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">## Let's get back to lists!</span>
<span class="token comment"># we can split a sentance into a lsit of words like this</span>
sentance <span class="token operator">=</span> <span class="token string">"I really like to write code!"</span>
words <span class="token operator">=</span> sentance<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token comment"># split it at every space character</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Wow, list's look kinda weird, huh?"</span><span class="token punctuation">)</span>
<span class="token comment"># we can also grab just one part of a list</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># this will grab the thing at the 0th position</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># this will grab the thing at the 3rd position</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
